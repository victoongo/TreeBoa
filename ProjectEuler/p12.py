# -*- coding: utf-8 -*-
"""
Created on Tue Jun  9 16:02:30 2015

Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

@author: victor
"""

def count_divisor(num):
    p_list = [2, 3]
    while num != p_list[-1]:
        #print num, p_list[-1]
        if num % p_list[-1] == 0:
            num /= p_list[-1]
        else:
            p_list = next_prime(p_list)
    return p_list[-1]
print largest_prime_factor(13195)

def hi_divisible_tri_num(divisor_num):
    num = 1
    tri_num = 0
    divisor_count = 0
    while divisor_count <= 500:
        tri_num += num
        num += 1
        divisor_count = count_divisor(tri_num)
    return tri_num
print hi_divisible_tri_num(500)

"""
# cumsum is not needed as the triangle number is iterative
import numpy as np

a = np.array([[1,2,3], [4,5,6]])
a
np.cumsum(a)
"""